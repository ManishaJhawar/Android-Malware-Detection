import matplotlib.pyplot as plt
import math
import csv
import random
import scipy.stats as st
import numpy as np
from runTree import DecisionTree
from collections import Counter

class Node():
    value = ""
    children = []

    def __init__(self, value, dictionary):
        self.value = value
        if (isinstance(dictionary, dict)):
            self.children = dictionary.keys()

def loadCsv(filename):
	lines=csv.reader(open(filename,'r'))
	dataset=list(lines)
	for i in range(len(dataset)):
		dataset[i]=[x for x in dataset[i]]
	dataset.pop(0)
	for i in range(len(dataset)):
		dataset[i]=[int(x) for x in dataset[i]]
	return dataset


def storeAsNumpy(dataset):
	# Storing as numpy objects saves space **********
	dataset = np.array(dataset)
	return dataset

def main():
	# Load the dataset
	filename = "top100eachAndroidDataset.csv"
	# filename = "combinedAndroidDataset_noHeaders.csv"


	# Loading the training data
	dataset = loadCsv(filename)
	dataset = storeAsNumpy(dataset)

	# print ("Length of dataset = ",len(dataset[0]))

	# with open('combinedPerms402.csv', 'r') as f1:
	with open('top100each.csv', 'r') as f1:
		reader1 = csv.reader(f1)
		permNames = []
		for row in reader1:
			permNames.append(row[0].strip())
	permNames.append("class_label")
	

	classLabel = permNames[-1] # This is our target
	print ("classLabel = ",classLabel)

	NoOfFolds = 10

	# acc1 is the list which stores the accuarcy for each cross validation
	acc1 = []
	prePos1 = []
	preNeg1 = []
	random.shuffle(dataset)

	for k in range(NoOfFolds):
		trainData = [t for i, t in enumerate(dataset) if i % NoOfFolds != k]
		testData = [t for i, t in enumerate(dataset) if i % NoOfFolds == k]

		trainData = storeAsNumpy(trainData)
		testData = storeAsNumpy(testData)

		tree = DecisionTree()
		tree.learn(trainData, permNames, classLabel)
		
		results = []
		for testTuple in testData:
			# tempDict is a copy of the tree generated after training
			tempDict = tree.dtree.copy()
			result = ""
			while(isinstance(tempDict, dict)):
				root = Node(list(tempDict)[0], tempDict[list(tempDict)[0]])
				tempDict = tempDict[list(tempDict)[0]]
				index = permNames.index(root.value)
				value = testTuple[index]
				# print("value = ",value)
				# print("tempdict = ",tempDict)
				if(value in tempDict.keys()):
					child = Node(value, tempDict[value])
					result = tempDict[value]
					tempDict = tempDict[value]
				else:
					result = "Null"
					break
			if result != "Null":
				if result == testTuple[-1]:
					results.append(["match",result,testTuple[-1]])
				else:
					results.append(["mismatch",result,testTuple[-1]])

		results = storeAsNumpy(results)

		# print("results = ",results)
		a = results[:,0]
		# print ("a = ",a)
		counter = Counter(a)
		# print("counter = ",counter['match'])

		tp = tn = fp = fn = 0
		for i in results:
			# print("i = ",i)
			if (i[0] == 'match' and i[1] == '1'):
				tp += 1
			elif (i[0] == 'match' and i[1] == '0'):
				tn += 1
			elif (i[0] == 'mismatch' and i[1] == '1'):
				fp += 1
			elif (i[0] == 'mismatch' and i[1] == '0'):
				fn += 1

		print("total = ", tp + tn + fp + fn)
		# print("len(results) = ",len(results))

		acc1.append((tp+tn)/(tp+tn+fp+fn))

		# Precision positive
		prePos = ((tp) * 1.0) / (tp + fp)
		prePos1.append(prePos)

		# Precision negative
		preNeg = ((tn) * 1.0) / (tn + fn)
		preNeg1.append(preNeg)

		# Recall positive
		recPos = ((tp) * 1.0) / (tp + fn)

		# Recall negative
		recNeg = ((tn) * 1.0) / (tn + fp)

		print("Precision + = ", prePos)
		print("Precision - = ", preNeg)
		print("Recall + = ", recPos)
		print("Recall - = ", recNeg)

	avgAcc1 = sum(acc1) / len(acc1)
	print("Average accuracy : ", avgAcc1*100," %")

	crossValidations = [x+1 for x in range(NoOfFolds)]
	print("crossValidations = ",crossValidations)
	print("Accuracies = ",acc1)
	print("prePos1 = ",prePos1)
	print("preNeg1 = ",preNeg1)

	# columns = ['Cross Validations', 'Accuracy']
	plt.title("Accuracies vs. Cross Validations")
	plt.xlabel('Cross Validation')
	plt.ylabel('Accuracy')
	plt.plot(crossValidations, acc1)
	plt.show()

	plt.title("Blue: Benign, Red: Malware")
	plt.xlabel('Cross Validation')
	plt.ylabel('Precision')
	plt.plot(crossValidations, preNeg1, 'r-', label = 'Malware')
	plt.plot(crossValidations, prePos1, 'b-', label = 'Benign')
	plt.show()

main()

